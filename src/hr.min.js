function _classPrivateMethodInitSpec (i, t) { _checkPrivateRedeclaration(i, t), t.add(i) } function _checkPrivateRedeclaration (i, t) { if (t.has(i)) throw new TypeError('Cannot initialize the same private elements twice on an object') } function _classPrivateMethodGet (i, t, e) { if (!t.has(i)) throw new TypeError('attempted to get private field on non-instance'); return e }!(function () { const i = new WeakSet(); class t {constructor (t, e = {}) { _classPrivateMethodInitSpec(this, i), this.el = document.querySelectorAll(t), this.options = e, this.defaultOptions = { highlight: null, replaceWith: null, backgroundColor: 'rgb(255, 222, 112)' } }hr () { for (let s = 0; s < this.el.length; s++) { var t, n, o, h; if (((t = this.options) === null || void 0 === t || !t.replaceWith) && (n = this.options) !== null && void 0 !== n && n.highlight) { if (Array.isArray(this.options.highlight)) for (let i = 0; i < this.options.highlight.length; i++) this.el[s].innerHTML = this.el[s].innerHTML.replace(new RegExp('(' + this.options.highlight[i] + ')', 'gi'), '<span data-hr>$1</span>'); else this.el[s].innerHTML = this.el[s].innerHTML.replace(new RegExp('(' + this.options.highlight + ')', 'i'), '<span data-hr>$1</span>'); _classPrivateMethodGet(this, i, e).call(this, this.el[s]) } if ((o = this.options) !== null && void 0 !== o && o.highlight && this.options.highlight !== null && (h = this.options) !== null && void 0 !== h && h.replaceWith && this.options.replaceWith !== null) { if (Array.isArray(this.options.highlight) && Array.isArray(this.options.replaceWith)) for (let i = 0; i < this.options.highlight.length; i++) void 0 !== this.options.replaceWith[i] && (this.el[s].innerHTML = this.el[s].innerHTML.replace(new RegExp(this.options.highlight[i], 'gi'), '<span data-hr>' + this.options.replaceWith[i] + '</span>')); else this.el[s].innerHTML = this.el[s].innerHTML.replace(new RegExp(this.options.highlight, 'gi'), '<span data-hr>' + this.options.replaceWith + '</span>'); _classPrivateMethodGet(this, i, e).call(this, this.el[s]) } } }} function e (i) { const t = i.querySelectorAll('[data-hr]'); for (let i = 0; i < t.length; i++) { var e; t[i].style.backgroundColor = this.defaultOptions.backgroundColor, (e = this.options) !== null && void 0 !== e && e.backgroundColor && (t[i].style.backgroundColor = this.options.backgroundColor) } } typeof module !== 'undefined' && void 0 !== module.exports ? module.exports = t : typeof define === 'function' && define.amd ? define([], () => t) : window.HR = t }())
